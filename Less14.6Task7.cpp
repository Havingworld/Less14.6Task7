/*
После посылки из Китая осталась спец. плёнка для бережной перевозки груза — пупырка. Всего в пупырке 12 на 12 шариков-пузырьков.
Состояние любого пузырька — это всегда либо он целый, либо нет, т.е. true или false (тип массива bool). Для начала, 
требуется реализовать отдельную функцию инициализации пупырки начальным состоянием — полностью целая пупырка, т.е. все элементы true.
Но это только самое начало.

Программа заключается в последовательном лопанье целых регионов пузырьков. Перед каждым таким лопаньем надо показывать пользователю 
полностью всю плёнку: o — это целый пузырёк, x — лопнутый. Это тоже надо выделить в отдельную функцию. Итак, как выглядит само лопанье. 
Пользователь вводит две координаты: координаты начала региона и конца прямоугольного региона. Сама процедура лопанья пузырей должна 
быть реализована с помощью отдельной функции, все аргументы должны проверяться на их валидность, что они в в рамках диапазона возможных
значений — иначе должна быть выведена ошибка. После лопанья каждого пузыря, который не был ещё лопнут до того, 
в консоль должно выводиться сообщение “Pop!”.

Лопанье должно продолжаться до последнего пузырька. Как только вся пупырка потрачена, программа заканчивает выполнение. 
В принципе, вы можете подсчитать окончание в самой функции по отображению пузырьков плёнки, т.к. она выполняется после каждого лопанья.


*/

#include <iostream>
using namespace std;

int main()
{
    bool pops[12][12]{};
    //array initialization 
    for (int n = 0; n < 12; n++) {
        for (int m = 0; m < 12; m++) {
            pops[n][m] = true;
        }
    }
    // display pops
    for (int n = 0; n < 12; n++) {
        for (int m = 0; m < 12; m++) {
           // cout << (pops[n][m] == true) ? "o" : "x"; //NOT WORK
            if (pops[n][m] == true)  cout << "o";
            else  cout << "x";
            cout << " ";
        }
        cout << endl;
    }

    int x1, y1, x2, y2, nCount = 0;
    

    do {
        bool bErrorInput = false, bErrorPops = false;
        cout << endl << "Enter the cordinates (X1 Y1 X2 Y2): ";
        cin >> x1 >> y1 >> x2 >> y2;
        
        //input valiation
        if ((x1 > 11 || x1 < 0) &&
            (y1 > 11 || y1 < 0) &&
            (x2 > 11 || x2 < 0) &&
            (y2 > 11 || y2 < 0)) bErrorInput = true;
        //check and write to pops 
        for (int n = y1; n <= y2; n++) {
            for (int m = x1; m <= x2; m++) {
                if (pops[n][m] == true) {
                    bErrorPops = true;      //not work validation
                    nCount++;
                    cout << "Pop!" << endl;
                }
                pops[n][m] = false;
            }
        }
        if (bErrorInput && bErrorPops) {
            cout << "incorrect input, try again." << endl;
            continue;
        }

        //display gamebord
        for (int n = 11; n >= 0; n--) {
            for (int m = 0; m < 12; m++) {
                // cout << (pops[n][m] == true) ? "o" : "x"; //NOT WORK
                if (pops[n][m] == true)  cout << "o";
                else  cout << "x";
                cout << " ";
            }
            cout << endl;
        }

        //nCount++;

    } while (nCount < 144);
}

